{"version":3,"sources":["PathVisualizer/Node/Node.jsx","Algorithms/Dijkstra.js","PathVisualizer/PathVisualizer.jsx","Components/Navbar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","onClick","visualizeDijkstra","resetPath","currentRow","createNode","slice","newNode","Navbar","class","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.82598695.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n    render() {\n        const {\n            col,\n            isFinish,\n            isStart,\n            isWall,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n            row,\n        } = this.props;\n        const extraClassName = isFinish\n            ? \"node-finish\"\n            : isStart\n                ? \"node-start\"\n                : isWall\n                    ? \"node-wall\"\n                    : \"\";\n\n        return (\n            <div\n                id={`node-${row}-${col}`}\n                className={`node ${extraClassName}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}\n            ></div>\n        );\n    }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        // If we encounter a wall, we skip it.\n        if (closestNode.isWall) continue;\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should therefore stop.\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../Algorithms/Dijkstra\";\nimport \"./PathVisualizer.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathVisualizer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n        };\n    }\n\n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({ grid });\n    }\n\n    handleMouseDown(row, col) {\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mouseIsPressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({ grid: newGrid });\n    }\n\n    handleMouseUp() {\n        this.setState({ mouseIsPressed: false });\n    }\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    \"node node-visited\";\n            }, 10 * i);\n        }\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n            setTimeout(() => {\n                const node = nodesInShortestPathOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    \"node node-shortest-path\";\n            }, 50 * i);\n        }\n    }\n\n    visualizeDijkstra() {\n        const { grid } = this.state;\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    resetPath() {\n        this.setState({grid : getInitialGrid()})\n    }\n\n    render() {\n        const { grid, mouseIsPressed } = this.state;\n\n        return (\n            <>\n                <div className=\"grid\">\n                    {grid.map((row, rowIdx) => {\n                        return (\n                            <div key={rowIdx}>\n                                {row.map((node, nodeIdx) => {\n                                    const { row, col, isFinish, isStart, isWall } = node;\n                                    return (\n                                        <Node\n                                            key={nodeIdx}\n                                            col={col}\n                                            isFinish={isFinish}\n                                            isStart={isStart}\n                                            isWall={isWall}\n                                            mouseIsPressed={mouseIsPressed}\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                            onMouseEnter={(row, col) =>\n                                                this.handleMouseEnter(row, col)\n                                            }\n                                            onMouseUp={() => this.handleMouseUp()}\n                                            row={row}\n                                        ></Node>\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                    <div className=\"button-container\">\n                        <button\n                            className=\"button-1\"\n                            onClick={() => this.visualizeDijkstra()}\n                        >\n                            Visualize Dijkstra's Algorithm\n                        </button>\n                        <button \n                            className=\"button-1\"\n                            onClick={() => this.resetPath()}\n                        >Reset Wall</button>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n        const currentRow = [];\n        for (let col = 0; col < 50; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};\n","import React from \"react\";\nimport \"./Navbar.css\";\n\nfunction Navbar() {\n    return (\n        <div class=\"topnav\">\n            <h1>PathVisualizer</h1>\n        </div>\n    );\n}\n\nexport default Navbar;\n","import \"./App.css\";\nimport PathVisualizer from \"./PathVisualizer/PathVisualizer\";\nimport Navbar from \"./Components/Navbar\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Navbar />\n            <PathVisualizer />\n\n            <div className=\"footer\">\n                <p>Made by Samuel Christopher Swandi</p>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}